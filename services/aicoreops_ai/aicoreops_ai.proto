syntax = "proto3";

package ai;

option go_package = "./types";

// ----------------------- 通用消息类型 -----------------------
message HistorySession {
  string session_id = 1; // 会话ID
  string title = 2;      // 会话标题
}

// ----------------------- AI 助手相关消息 -----------------------
// 创建新会话
message CreateNewChatRequest {
}

message CreateNewChatResponse {
  int32 code = 1;       // 状态码
  string message = 2;   // 错误信息或成功提示
  SessionData data = 3; // 返回的数据

  message SessionData {
    string session_id = 1;  // 会话ID
  }
}

// 对话消息
message AskQuestionRequest {
  string title = 1;            // 用于指定文档检索
  string question = 2;         // 用户提问内容
  string session_id = 3;       // 会话ID,用于追踪对话上下文
  float score_threshold = 4; // 用于指定文档检索的相似度阈值
  int32 top_k = 5;            // 用于指定文档检索的返回数量
}

message AskQuestionResponse {
  int32 code = 1;        // 状态码，0 表示成功，非 0 表示错误
  string message = 2;    // 错误信息或成功提示
  AnswerData data = 3;   // 返回的数据

  message AnswerData {
    string answer = 1;    // AI 助手的回答内容
    string session_id = 2; // 会话ID
  }
}

// 获取会话列表
message GetChatListRequest {
  int32 page = 1;     // 页码
  int32 page_size = 2; // 每页数量
}

message GetChatListResponse {
  int32 code = 1;                    // 状态码
  string message = 2;                // 错误信息或成功提示
  repeated HistorySession data = 3;  // 返回的数据
}

message GetChatHistoryRequest {
  string session_id = 1; // 会话ID
  int32 page = 2;       // 页码
  int32 page_size = 3;  // 每页数量
}

// 获取具体会话历史
message GetChatHistoryResponse {
  int32 code = 1;           // 状态码
  string message = 2;       // 错误信息或成功提示
  ChatHistoryData data = 3; // 返回的数据

  message ChatHistoryData {
    repeated ChatMessage messages = 1; // 聊天记录列表
    int32 total = 2;                  // 总记录数
  }

  message ChatMessage {
    string question = 1;   // 问题
    string answer = 2;     // 回答
    int64 create_time = 3; // 创建时间
  }
}

// 文档管理相关
message UploadDocumentRequest {
  string title = 1;    // 文档标题
  string content = 2;  // 文档内容
}

// 上传文档
message UploadDocumentResponse {
  int32 code = 1;      // 状态码
  string message = 2;  // 错误信息或成功提示
  DocData data = 3;    // 返回的数据

  message DocData {
    string doc_id = 1; // 文档ID
  }
}

// 获取文档列表
message GetDocListRequest {
  int32 page = 1;     // 页码
  int32 page_size = 2; // 每页数量
}

message GetDocListResponse {
  int32 code = 1;      // 状态码
  string message = 2;  // 错误信息或成功提示
  repeated DocData data = 3; // 返回的数据

  message DocData {
    string doc_id = 1; // 文档ID
    string title = 2;  // 文档标题
    string content = 3; // 文档内容 or URL
  }
}

// ----------------------- 日志分析相关消息 -----------------------
message AnalyzeLogsRequest {
  string log_data = 1;  // 提交的日志内容
}

message AnalyzeLogsResponse {
  int32 code = 1;            // 状态码
  string message = 2;        // 错误信息或成功提示
  SuggestionData data = 3;   // 返回的数据

  message SuggestionData {
    string suggestion = 1;   // 修复建议
  }
}

// ----------------------- 自动修复相关消息 -----------------------
message FixTaskRequest {
  string task = 1;     // 修复任务类型（如 fixOOM）
  string pod_id = 2;   // Pod ID
}

message FixTaskResponse {
  int32 code = 1;          // 状态码
  string message = 2;      // 错误信息或成功提示
  FixStatusData data = 3;  // 返回的数据

  message FixStatusData {
    string status = 1;     // 修复任务状态
  }
}

// ----------------------- 服务定义 -----------------------
// 对话式 AI 助手服务
service AIHelper {
  // 创建新会话
  rpc CreateNewChat (CreateNewChatRequest) returns (CreateNewChatResponse);
  // 获取历史会话列表
  rpc GetChatList (GetChatListRequest) returns (GetChatListResponse);
  // 获取具体会话历史
  rpc GetChatHistory (GetChatHistoryRequest) returns (GetChatHistoryResponse);
  // 上传文档到知识库
  rpc UploadDocument (UploadDocumentRequest) returns (UploadDocumentResponse);
  // 用户提问，获取解答
  rpc AskQuestion (stream AskQuestionRequest) returns (stream AskQuestionResponse);
  // 获取文档列表
  rpc GetDocList (GetDocListRequest) returns (GetDocListResponse);
}

// 日志分析服务
service LogAnalysis {
  // 分析日志，返回修复建议
  rpc AnalyzeLogs (AnalyzeLogsRequest) returns (AnalyzeLogsResponse);
}

// 自动修复服务
service AutoFix {
  // 执行修复任务
  rpc FixTask (FixTaskRequest) returns (FixTaskResponse);
}